name: Secure ECR-EKS-Helm Pipeline

on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Install dependencies
      run: npm install

    - name: Run SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=fekri600_devsecops2
          -Dsonar.organization=fekri600
          -Dsonar.sources=.
          -Dsonar.host.url=https://sonarcloud.io

    # - name: SonarCloud Quality Gate Check
    #   uses: SonarSource/sonarqube-quality-gate-action@master
    #   timeout-minutes: 5
    #   env:
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Build Docker image
      run: docker build -t devsecops:latest .

    - name: Scan Docker image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'devsecops'
        format: 'table'
        exit-code: '0'
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: us-east-1

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Tag and push Docker image to ECR
      env:
        ECR_REPO_URL: ${{ secrets.ECR_REPO_URL }}
        
      run: |
        IMAGE_TAG=${{ github.sha }}
        docker tag devsecops:latest $ECR_REPO_URL:$IMAGE_TAG
        docker push $ECR_REPO_URL:$IMAGE_TAG

  deploy-terraform:
    name: Deploy Helm via Terraform
    needs: build-and-scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app_deploy

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: us-east-1

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.11.4

    - name: Configure kubeconfig for EKS
      run: |
        aws eks update-kubeconfig \
          --region us-east-1 \
          --name ${{ secrets.EKS_CLUSTER }}
    

    - name: Import release into TF state if it already exists
      id: import
      run: |
        set -e
        RELEASE=devsecops-app
        NAMESPACE=default
        TFADDR='module.helm_release.helm_release.app'
  
        # Does Helm think the release exists?
        if helm status "$RELEASE" -n "$NAMESPACE" >/dev/null 2>&1 ; then
          echo "Helm release $RELEASE exists."
  
          # Is it already tracked in state?
          if terraform state list "$TFADDR" >/dev/null 2>&1 ; then
            echo "Terraform is already managing $RELEASE."
          else
            echo "::group::Importing $RELEASE into Terraform state"
            terraform import "$TFADDR" "$RELEASE" || true
            echo "::endgroup::"
          fi
        else
          echo "Helm release $RELEASE not found â€“ nothing to import."
        fi
  

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan with image tag
      run: |
        terraform plan \
          -var="image_tag=${{ github.sha }}" \
          -var="ecr_repo_url=${{ secrets.ECR_REPO_URL }}" \
          -var="cluster_name=${{ secrets.EKS_CLUSTER }}" \
          -var="cluster_ca_certificate_data=${{ secrets.EKS_CLUSTER_CA }}" \
          -var="cluster_endpoint=${{ secrets.EKS_CLUSTER_ENDPOINT }}"
    
  

    # - name: Terraform Apply with image tag
    #   run: |
    #     terraform apply -auto-approve \
    #       -var="image_tag=${{ github.sha }}" \
    #       -var="ecr_repo_url=${{ secrets.ECR_REPO_URL }}" \
    #       -var="cluster_name=${{ secrets.EKS_CLUSTER }}" \
    #       -var="cluster_ca_certificate_data=${{ secrets.EKS_CLUSTER_CA }}" \
    #       -var="cluster_endpoint=${{ secrets.EKS_CLUSTER_ENDPOINT }}"
    

           # ---------- Terraform Apply (allow failure, capture exit code) -------------
    - name: Terraform Apply
      id: apply
      continue-on-error: true
      run: |
        set -o pipefail
        terraform apply -auto-approve \
          -var="image_tag=${{ github.sha }}" \
          -var="ecr_repo_url=${{ secrets.ECR_REPO_URL }}" \
          -var="cluster_name=${{ secrets.EKS_CLUSTER }}" \
          -var="cluster_ca_certificate_data=${{ secrets.EKS_CLUSTER_CA }}" \
          -var="cluster_endpoint=${{ secrets.EKS_CLUSTER_ENDPOINT }}"
        echo "tf_exitcode=$?" >> "$GITHUB_OUTPUT"

    # ---------- Debug ONLY if Terraform failed ---------------------------------
    - name: Install Helm (for debug)
      if: steps.apply.outputs.tf_exitcode != '0'
      run: |
        curl -sSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

    - name: Dump Helm status & pod details
      if: steps.apply.outputs.tf_exitcode != '0'
      continue-on-error: true
      env:
        RELEASE:   devsecops-app
        NAMESPACE: default
      run: |
        echo "### Helm status"
        helm status "$RELEASE" -n "$NAMESPACE" || true

        echo ""
        echo "### Pods for $RELEASE"
        kubectl get pods -n "$NAMESPACE" -l app.kubernetes.io/instance=$RELEASE -o wide || true

        for pod in $(kubectl get pods -n "$NAMESPACE" -l app.kubernetes.io/instance=$RELEASE \
                     --field-selector=status.phase!=Running,status.phase!=Succeeded \
                     -o jsonpath='{.items[*].metadata.name}' 2>/dev/null); do
          echo ""
          echo "###### DESCRIBE $pod"
          kubectl describe pod "$pod" -n "$NAMESPACE" || true

          echo ""
          echo "###### LOGS (last 200 lines) $pod"
          kubectl logs --tail=200 "$pod" -n "$NAMESPACE" || true
        done

    # ---------- Fail the job after debugging (only if Terraform failed) ---------
    - name: Mark job failed if Terraform failed
      if: steps.apply.outputs.tf_exitcode != '0'
      run: |
        echo "Terraform apply failed with exit code ${{ steps.apply.outputs.tf_exitcode }}"
        exit 1
